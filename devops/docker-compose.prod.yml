version: "3.9"

networks:
  frontend:
    name: ${COMPOSE_PROJECT_NAME:-api}_frontend
  backend:
    name: ${COMPOSE_PROJECT_NAME:-api}_backend
    internal: true  # No external access

services:
  redis:
    container_name: ${COMPOSE_PROJECT_NAME:-api}-redis-${ENVIRONMENT:-prod}
    image: redis:alpine
    volumes:
      - redis_data:/data
    networks:
      - backend

  web:
    container_name: ${COMPOSE_PROJECT_NAME:-api}-web-${ENVIRONMENT:-prod}
    build:
      context: ..
      dockerfile: devops/Dockerfile.prod
    ports:
      - "8000:8000"
    env_file:
      - ../.env.prod
    depends_on:
      - db
    networks:
      - frontend
      - backend

  db:
    container_name: ${COMPOSE_PROJECT_NAME:-api}-db-${ENVIRONMENT:-prod}
    image: postgres:16
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-${API_NAME:-api}_db}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
volumes:
  redis_data:
  postgres_data:
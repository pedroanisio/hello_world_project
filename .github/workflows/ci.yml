name: CI

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:alpine
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Copy .env.test
        run: cp devops/.env.test .env
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.test.txt
          
      - name: Run linting
        run: |
          flake8 .
          black . --check
          isort . --check-only
          
      - name: Run security checks
        run: |
          pip install bandit safety
          bandit -r src/
          safety check -i 68094 -i 73725 -i 70716 -i 70715 -i 64396 -i 64459
        
      - name: Run tests and check coverage
        run: |
          pytest --cov=src --cov-report=term-missing --cov-report=xml
          COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(float(root.attrib['line-rate']) * 100)")
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV

      - name: Fail if coverage < 70%
        run: |
          if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            echo "Test coverage is too low: $COVERAGE%"
            exit 1
          fi
